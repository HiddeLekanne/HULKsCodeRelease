#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import logging
from pathlib import Path
import sys

import gevent
from termcolor import colored

from getNaoNumbers import getNaoNumbers
from hulks.naossh import NaoSSH


class ColorLog(object):

    colormap = dict(
        debug=dict(color='grey', attrs=['bold']),
        info=dict(color='white'),
        warn=dict(color='yellow', attrs=['bold']),
        warning=dict(color='yellow', attrs=['bold']),
        error=dict(color='red'),
        exception=dict(color='red', attrs=['bold']),
        critical=dict(color='red', attrs=['bold']),
    )

    def __init__(self, name):
        self._log = logging.getLogger(name)

    def __getattr__(self, name):
        if name in ['debug', 'info', 'warn', 'warning', 'error', 'exception', 'critical']:
            return lambda s, *args: getattr(self._log, name)(colored(s, **self.colormap[name]), *args)

        return getattr(self._log, name)


logging.basicConfig(stream=sys.stdout, level=logging.INFO, format='[%(levelname)s] %(message)s')

logger = ColorLog(__name__)

# workaround for https://github.com/ParallelSSH/parallel-ssh/issues/156
def shutdown(nao, args):
    client = NaoSSH([str(nao)], user="nao", pkey=Path(__file__).parent/"ssh_key", num_retries=0, timeout=args.timeout)
    try:
        output = client.shutdown(reboot=args.reboot)
        for _, host_output in output.items():
            for line in host_output.stdout:
                logger.debug(nao, line)
            for line in host_output.stderr:
                logger.debug(nao, line)
            if host_output.exit_code == 0:
                logger.info("Successfully shut down NAO {}".format(nao))
            else:
                logger.error("Couldn't shutdown NAO {}!".format(nao))
    except Exception as e:
        logger.error("Couldn't shutdown NAO {}!".format(nao))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Sends shutdown commands all naos")
    parser.add_argument("-r", "--reboot", help="Reboot instead of shutdown", action="store_true")
    parser.add_argument("-t", "--timeout", help="SSH timeout. Increase on slow networks (Default 3s)", type=float, default=3)
    args = parser.parse_args()

    naos = getNaoNumbers()
    print(naos)
    tasks = [gevent.spawn(shutdown, nao, args) for nao in naos]
    gevent.joinall(tasks)
