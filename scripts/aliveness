#!/usr/bin/env python3

import argparse
import os
import pathlib
import sys
import time
import yaml

from hulks import aliveness
from hulks.aliveness.shortcuts import read_aliveness_cache
from hulks.constants import ALIVENESS_PATH


def compact_printer(aliveness_info, args):
    output = []
    for robot in aliveness_info["robots"]:
        if args.filter and not getattr(robot, args.filter, False):
            continue
        output.append(str(robot.info.head_num))
    print(" ".join(output))


def table_printer(aliveness_info, args):
    print("Head\tBody\tPlayer\tLAN?\tWLAN?\tAlive?\thulk-service")
    for robot in aliveness_info["robots"]:
        if args.filter and not getattr(robot, args.filter, False):
            continue
        lan = "Yes" if robot.is_lan else "No"
        wlan = "Yes" if robot.is_wlan else "No"
        alive = "Yes" if robot.is_alive else "No"
        body_num = robot.info.body_num \
            if robot.info.body_num != 0 else "N/A"
        player_num = robot.info.player_num \
            if robot.info.player_num != 0 else "N/A"

        if robot.is_alive:
            hulk_service = "Yes"
        else:
            if robot.is_lan and robot.is_wlan:
                hulk_service = "No"
            else:
                hulk_service = "Unknown"

        print("{}\t{}\t{}\t{}\t{}\t{}\t{}".format(robot.info.head_num,
                                                  body_num, player_num, lan, wlan,
                                                  alive, hulk_service))


def main():
    parser = argparse.ArgumentParser(
        description="Prints aliveness data from the aliveness cache file")
    parser.add_argument("filter", nargs="?", default="",
                        help="show only robots with this property")
    parser.add_argument("--compact", "-c", action="store_true",
                        help="Only print head numbers in a single line")
    args = parser.parse_args()

    try:
        aliveness_info = read_aliveness_cache()
    except Exception as e:
        print(str(e), file=sys.stderr)
        exit(-1)

    if args.compact:
        compact_printer(aliveness_info, args)
    else:
        table_printer(aliveness_info, args)


if __name__ == "__main__":
    main()
