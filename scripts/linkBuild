#!/bin/bash

# Get base directory for better referencing
BASEDIR=`cd $(dirname $0); pwd -P`
BASEDIR=${BASEDIR%/*}

source "${BASEDIR}/scripts/lib/msg.sh"
source "${BASEDIR}/scripts/lib/linkBuild.sh"
source "${BASEDIR}/scripts/lib/docker.sh"

function helpMenu {
  echo "Usage: $0 [OPTIONS]"
  echo ""
  echo "Options"
  echo " -b, --build-type BUILD_TYPE       link the specified build type (one out of Debug, Develop, Release)"
  echo " -t, --target TARGET               link the specified target (one out of nao, replay, simrobot, qt-websocket)"
  echo " -h, --help                        show this help"
}

function run {
  # prepare parameters
  PARAMETERS=""
  while [ "$#" -gt 0 ]; do
    if [[ $1 =~ ^- ]] && [[ ! $1 =~ ^-- ]]; then
      PARAMETERS+=$(echo "${1:1}" | sed -e "s/\(.\)/ -\1/g")
    else
      PARAMETERS+=" $1"
    fi
    shift
  done
  eval set -- "${PARAMETERS}";

  while [ "$#" -gt 0 ]; do
    case "$1" in
      "-b" | "--build-type")
        shift
        if [ "$#" -eq 0 ]; then
          msg -e "--build-type needs a build type as parameter!"
          helpMenu
          return 1
        fi
        BUILD_TYPE="$1"
        ;;
      "-t" | "--target")
        shift
        if [ "$#" -eq 0 ]; then
          msg -e "--target needs a target as parameter!"
          helpMenu
          return 1
        fi
        TARGET="$1"
        ;;
      *)
        msg -e "Failed to parse \"$1\"!"
        helpMenu
        return 1
        ;;
    esac
    shift
  done

  msg -n "Linking target ${TARGET} with build type ${BUILD_TYPE}."

  linkCurrentBuild ${BASEDIR} ${TARGET} ${BUILD_TYPE}
  if [ "$?" -ne 0 ]; then
      msg -e "Link target directory does not exist."
      return 1
  fi
}

handleDocker "${BASEDIR}" "$@"
