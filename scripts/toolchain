#!/bin/bash

# Get base directory for better referencing
BASEDIR=`cd $(dirname $0); pwd -P`
BASEDIR=${BASEDIR%/*}

source "${BASEDIR}/scripts/lib/msg.sh"
source "${BASEDIR}/scripts/lib/docker.sh"
source "${BASEDIR}/scripts/lib/dependencies.sh"

# This should be the only place that needs to be updated when a new toolchain version is available.
CURRENT_HULKS_V5_VERSION="7.3.0-1"
CURRENT_HULKS_V6_VERSION="9.2.0-1"
CURRENT_NAOQI_V5_VERSION="2.1.4.13"
DEFAULT_TOOLCHAIN_REPO="${HOME}/naotoolchain"


function helpMenu {
  echo "Usage: $0 COMMAND [OPTIONS]"
  echo ""
  echo "Commands"
  echo " init [TOOLCHAIN_REPO]             initialize the toolchains for this repository"
  echo " docker                            toggle docker usage"
  echo " list                              list all installed toolchain versions"
  echo " select CATEGORY VERSION           select a toolchain version for a specific category"
  echo " update                            download current toolchains"
  echo " help                              show this help"
  echo ""
  echo "Toolchain Repo"
  echo " an optional directory where the actual toolchain binaries are stored."
  echo " The default is ${DEFAULT_TOOLCHAIN_REPO}."
  echo ""
  echo "Category"
  echo " the toolchain type, i.e. for which part the toolchain is used (one out of naoqi-v5, hulks-v5, hulks-v6)"
  echo ""
  echo "Version"
  echo " current hulks-v5 version is ${CURRENT_HULKS_V5_VERSION}"
  echo " current hulks-v6 version is ${CURRENT_HULKS_V6_VERSION}"
  echo " current naoqi-v5 version is ${CURRENT_NAOQI_V5_VERSION}"
  echo " there is no naoqi-v6 toolchain needed!!"
}

function getToolchainName {
  if [ "$#" -ne 2 ]; then
    return 1
  fi
  local CATEGORY_AND_NAO_VERSION="$1"
  local CATEGORY=""
  case "${CATEGORY_AND_NAO_VERSION}" in
    "hulks-v5")
      CATEGORY="hulks"
      ;;
    "hulks-v6")
      CATEGORY="hulks"
      ;;
    "naoqi-v5")
      CATEGORY="atom"
      ;;
    *)
      return 1
      ;;
  esac
  local VERSION="$2"
  local OS=`uname`
  case "${OS}" in
    "Linux")
      OS="linux"
      ;;
    "Darwin")
      OS="mac"
      ;;
    *)
      return 1
      ;;
  esac
  local BITS=`uname -m`
  case "${BITS}" in
    i?86)
      BITS="32"
      ;;
    "x86_64")
      BITS="64"
      ;;
    *)
      return 1
      ;;
  esac
  echo "ctc-${OS}${BITS}-${CATEGORY}-${VERSION}"
  return 0
}

function downloadToolchain {
  local TOOLCHAIN_REPO="$1"
  local CATEGORY="$2"
  local VERSION="$3"
  local NAME="$4"
  local ARCHIVE_NAME="${NAME}.tar.bz2"
  local SERVER_PATH="toolchains/${CATEGORY}/${VERSION}/${ARCHIVE_NAME}"
  local SERVER_HOST="bighulk.lan"
  local PRIVILEGED_EXECUTE=""
  if iAmInDocker; then
    msg -e "You are using docker and try to download a new toolchain! This is not possible (or at least not sensible)."
    msg -n "Use docker pull ${DOCKER_IMAGE_NAME} instead."
    return 1
  fi
  if [ ! -d "${TOOLCHAIN_REPO}" ]; then
    msg -e "The toolchain repo at ${TOOLCHAIN_REPO} does not exist!"
    return 1
  fi
  if [ ! -w "${TOOLCHAIN_REPO}" ]; then
    msg -n "The toolchain repo at ${TOOLCHAIN_REPO} is not writable by the current user; it will be tried as root."
    PRIVILEGED_EXECUTE="sudo"
  fi
  cd "${TOOLCHAIN_REPO}"
  if [ ! -f "${ARCHIVE_NAME}" ]; then
    msg -n "Download via http - http://${SERVER_HOST}/${SERVER_PATH}"
    ${PRIVILEGED_EXECUTE} curl --progress-bar -o "${ARCHIVE_NAME}" "http://${SERVER_HOST}/${SERVER_PATH}"
    if [ "$?" -ne 0 ]; then
      msg -e "Failed to download toolchain!"
      return 1
    fi
  fi
  msg -e "Extracting ${ARCHIVE_NAME}."
  ${PRIVILEGED_EXECUTE} tar xjf "${ARCHIVE_NAME}" --checkpoint=.100
  if [ "$?" -ne 0 ]; then
    msg -e "Failed to extract toolchain!"
    return 1
  fi
  msg -n "\nExtraction of toolchain complete."
  ${PRIVILEGED_EXECUTE} rm "${ARCHIVE_NAME}"
  return 0
}

function selectVersion {
  if [ "$#" -ne 5 ]; then
    return 1
  fi
  local TOOLCHAIN_DIR="$1"
  local TOOLCHAIN_REPO="$2"
  local CATEGORY="$3"
  local NAO_VERSION="$4"
  local NAME="$5"
  ln -snf "${TOOLCHAIN_REPO}/${NAME}" "${TOOLCHAIN_DIR}/${CATEGORY}-${NAO_VERSION}"
  # return value of selectValue will be return value of ln
}

function updateToolchain {
  local TOOLCHAIN_DIR="$1"
  local TOOLCHAIN_REPO="$2"
  local CATEGORY="$3"
  local NAO_VERSION="$4"
  local VERSION="$5"
  local NAME
  NAME=`getToolchainName "${CATEGORY}-${NAO_VERSION}" "${VERSION}"`
  if [ -d "${TOOLCHAIN_REPO}/${NAME}" ]; then
    msg -s "The current ${CATEGORY} toolchain is already installed at ${TOOLCHAIN_REPO}/${NAME}!"
  else
    msg -n "Will download ${CATEGORY} toolchain version ${VERSION}."
    downloadToolchain "${TOOLCHAIN_REPO}" "${CATEGORY}" "${VERSION}" "${NAME}"
  fi
  selectVersion "${TOOLCHAIN_DIR}" "${TOOLCHAIN_REPO}" "${CATEGORY}" "${NAO_VERSION}" "${NAME}"
  if [ "$?" -ne 0 ]; then
    msg -e "Could not select toolchain version!"
    return 1
  fi
  return 0
}

function cmdInit {
  if [ "$#" -gt 1 ]; then
    msg -e "The init command needs at most one argument!"
    helpMenu
    return 1
  elif [ "$#" -eq 1 ]; then
    TOOLCHAIN_REPO="$1"
    echo "${TOOLCHAIN_REPO}" > "${TOOLCHAIN_DIR}/repo"
    msg -s "Made ${TOOLCHAIN_REPO} persistent as toolchain repo!"
  fi
  if [ ! -d "${TOOLCHAIN_REPO}" ]; then
    msg -n "${TOOLCHAIN_REPO} does not exist yet; it will be created."
    mkdir -p "${TOOLCHAIN_REPO}" 2>/dev/null
    if [ "$?" -ne 0 ]; then
      # If it could not be created, try again with sudo.
      msg -n "${TOOLCHAIN_REPO} cannot be created as current user; it will be tried as root."
      sudo mkdir -p "${TOOLCHAIN_REPO}" 2>/dev/null
      if [ "$?" -ne 0 ]; then
        msg -e "Could not create ${TOOLCHAIN_REPO} as toolchain repository!"
        return 1
      fi
    fi
    msg -s "${TOOLCHAIN_REPO} has been created!"
  fi
  updateToolchain "${TOOLCHAIN_DIR}" "${TOOLCHAIN_REPO}" "hulks" "v5" "${CURRENT_HULKS_V5_VERSION}"
  updateToolchain "${TOOLCHAIN_DIR}" "${TOOLCHAIN_REPO}" "hulks" "v6" "${CURRENT_HULKS_V6_VERSION}"
  updateToolchain "${TOOLCHAIN_DIR}" "${TOOLCHAIN_REPO}" "naoqi" "v5" "${CURRENT_NAOQI_V5_VERSION}"
}

function cmdDocker {
  if [ -f "${TOOLCHAIN_DIR}/docker" ]; then
    rm "${TOOLCHAIN_DIR}/docker"
    # Restore the host toolchain repository if there was any.
    if [ -f "${TOOLCHAIN_DIR}/repo.save" ]; then
      mv "${TOOLCHAIN_DIR}/repo.save" "${TOOLCHAIN_DIR}/repo"
    fi
    msg -s "Deactivated docker for this repository!"
  else
    touch "${TOOLCHAIN_DIR}/docker"
    # Docker uses the /usr/local/NAOct default
    if [ -f "${TOOLCHAIN_DIR}/repo" ]; then
      mv "${TOOLCHAIN_DIR}/repo" "${TOOLCHAIN_DIR}/repo.save"
    fi
    msg -s "Activated docker for this repository!"
  fi
}

function cmdList {
  local DIRECTORY
  local VERSION
  for DIRECTORY in "${TOOLCHAIN_REPO}/"*; do
    if [ ! -d "${DIRECTORY}" ]; then
      continue
    fi
    DIRECTORY=`basename "${DIRECTORY}"`
    if [[ ! "${DIRECTORY}" =~ ^ctc ]]; then
      continue
    fi
    # This extracts the version at the end of the directory name.
    VERSION=`echo "${DIRECTORY}" | grep -oE "([0-9.]+-)?[0-9.]+$"`
    if [[ "${DIRECTORY}" =~ atom ]]; then
      echo "naoqi -- ${VERSION}"
    elif [[ "${DIRECTORY}" =~ hulks ]]; then
      echo "hulks -- ${VERSION}"
    fi
  done
}

function cmdSelect {
  if [ "$#" -ne 2 ]; then
    msg -e "The select command needs two arguments!"
    helpMenu
    return 1
  fi
  local CATEGORY_AND_NAO_VERSION="$1"
  local VERSION="$2"

  local CATEGORY=${CATEGORY_AND_NAO_VERSION%%-*}
  local NAO_VERSION=${CATEGORY_AND_NAO_VERSION#*-}
  # This cannot be written as one line because $? would have the value of the
  # local builtin afterwards (and not the return value of getToolchainName).
  local NAME
  NAME=`getToolchainName "${CATEGORY_AND_NAO_VERSION}" "${VERSION}"`
  if [ "$?" -eq 1 ]; then
    msg -e "Could not assemble toolchain name from category, version and machine!"
    return 1
  fi
  if [ ! -d "${TOOLCHAIN_REPO}/${NAME}" ]; then
    msg -e "The toolchain ${NAME} does not exist!"
    return 1
  fi
  selectVersion "${TOOLCHAIN_DIR}" "${TOOLCHAIN_REPO}" "${CATEGORY}" "${NAO_VERSION}" "${NAME}"
  if [ "$?" -ne 0 ]; then
    msg -e "Could not select toolchain version!"
    return 1
  fi
  msg -s "Selected version ${VERSION} (directory name ${NAME}) for category ${CATEGORY}!"
  return 0
}

function cmdUpdate {
  updateToolchain "${TOOLCHAIN_DIR}" "${TOOLCHAIN_REPO}" "hulks" "v5" "${CURRENT_HULKS_V5_VERSION}"
  updateToolchain "${TOOLCHAIN_DIR}" "${TOOLCHAIN_REPO}" "hulks" "v6" "${CURRENT_HULKS_V6_VERSION}"
  updateToolchain "${TOOLCHAIN_DIR}" "${TOOLCHAIN_REPO}" "naoqi" "v5" "${CURRENT_NAOQI_V5_VERSION}"
}

function run {
  if [ "$#" -lt 1 ]; then
    helpMenu
    return 1
  fi

  if [ ! "$1" == "docker" ]; then
    assertDependencies
  fi

  # this is the directory in which symlinks to the toolchains are stored
  TOOLCHAIN_DIR="${BASEDIR}/toolchain"
  # this is directory in which the actual toolchains are stored
  if [ -f "${TOOLCHAIN_DIR}/repo" ]; then
    TOOLCHAIN_REPO=`cat "${TOOLCHAIN_DIR}/repo"`
  else
    TOOLCHAIN_REPO="${DEFAULT_TOOLCHAIN_REPO}"
  fi

  case "$1" in
    "init")
      shift
      cmdInit "$@"
      return $?
      ;;
    "docker")
      shift
      cmdDocker "$@"
      return "$?"
      ;;
    "list")
      shift
      cmdList "$@"
      return $?
      ;;
    "select")
      shift
      cmdSelect "$@"
      return $?
      ;;
    "update")
      shift
      cmdUpdate "$@"
      return $?
      ;;
    "help")
      helpMenu
      return 0
      ;;
    *)
      msg -e "Unknown command: \"$1\"!"
      helpMenu
      return 1
      ;;
  esac
  return 0
}

handleDocker "${BASEDIR}" "$@"
